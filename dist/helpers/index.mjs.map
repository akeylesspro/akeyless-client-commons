{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\helpers\\index.mjs"],"names":["moment","getAuth","initializeApp","getStorage","addDoc","collection","deleteDoc","doc","getDoc","getDocs","Timestamp","query","setDoc","getFirestore","where","onSnapshot","cn2","car_number","length","appId","isNodeEnv","process","env","NEXT_PUBLIC_APP_ID","VITE_APP_ID","initApp","firebaseConfig","apiKey","authDomain","NEXT_PUBLIC_API_KEY","NEXT_PUBLIC_AUTH_DOMAIN","VITE_API_KEY","VITE_AUTH_DOMAIN","storageBucket","NEXT_PUBLIC_STORAGE_BUCKET","VITE_STORAGE_BUCKET","messagingSenderId","NEXT_PUBLIC_MESSAGING_SENDER_ID","VITE_MESSAGING_SENDER_ID","app","auth2","storage2","auth","error","console","db","users","ermEvents","collections","clients","sites","storage","lastLocations"],"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","sourcesContent":["// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore,\n  onSnapshot\n} from \"firebase/firestore\";\n\n// src/helpers/cars.ts\nvar formatCarNumber = (car_number) => {\n  var cn2 = car_number;\n  if (cn2?.length == 8) return `${cn2[0]}${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}${cn2[7]}`;\n  if (cn2?.length == 7) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}`;\n  if (cn2?.length == 6) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}-${cn2[4]}${cn2[5]}`;\n  if (cn2?.length == 5) return `${cn2[0]}-${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}`;\n  return cn2;\n};\n\n// src/helpers/firebase.ts\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    const storage2 = getStorage(app);\n    return { db: db2, auth: auth2, storage: storage2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth, storage } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar extractAlertsData = (doc2) => {\n  const data = doc2.data();\n  const { car_number, timestamp } = data;\n  return {\n    ...data,\n    timestamp_seconds: timestamp.seconds,\n    timestamp_ui: moment.unix(timestamp.seconds).format(\"DD/MM/YY HH:mm\"),\n    car_number: formatCarNumber(car_number)\n  };\n};\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar extractSiteData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"DD.MM.YYYY - HH:mm\"),\n    updated: moment(dateUpdated).format(\"DD.MM.YYYY - HH:mm\")\n  };\n};\nvar extractClientData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"HH:mm  DD/MM/YY\"),\n    updated: moment(dateUpdated).format(\"HH:mm  DD/MM/YY\")\n  };\n};\nvar extractBoardsData = (doc2) => {\n  const data = doc2.data();\n  const dateUploaded = typeof data.uploaded === \"string\" ? data.uploaded : moment.unix(data.uploaded?.seconds).format(\"DD/MM/YY HH:mm\");\n  return {\n    ...data,\n    id: doc2.id,\n    uploaded: dateUploaded\n  };\n};\nvar extractCarsData = (doc2) => {\n  const carData = doc2.data();\n  let icon;\n  const gov_info = carData.gov_info;\n  if (gov_info) {\n    if (carData.icon) {\n      icon = carData.icon;\n    } else if (gov_info.vehicle_type === \"atv\") {\n      icon = \"truck\";\n    } else if (gov_info.vehicle_type === \"motorcycle\") {\n      icon = \"motorcycle\";\n    } else {\n      icon = \"car\";\n    }\n  } else {\n    icon = \"car\";\n  }\n  return {\n    ...carData,\n    id: doc2.id,\n    brand: carData.brand || carData.manufacturer,\n    car_number: carData.carId,\n    icon\n  };\n};\nvar extractCanbusData = (doc2) => {\n  const data = doc2.data();\n  const newDate = new Date(data.timestamp.seconds * 1e3);\n  return {\n    ...data,\n    date_ui: moment(newDate).format(\"DD/MM/YYYY - HH:mm\")\n  };\n};\nvar extractLocationData = (doc2) => {\n  const locationData = doc2.data();\n  const { latitude, longitude, spd, timestamp, prev_latitude, prev_longitude } = locationData;\n  return {\n    ...locationData,\n    id: doc2.id,\n    lat: latitude,\n    lng: longitude,\n    prev_lat: prev_latitude,\n    prev_lng: prev_longitude,\n    timestamp: timestamp?.seconds,\n    spd: Number(spd).toFixed(0)\n  };\n};\nvar get_all_documents = async (collection_path) => {\n  try {\n    const snapshot2 = await getDocs(collection(db, collection_path));\n    const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    return [];\n  }\n};\nvar get_document_by_id = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    const doc_snap = await getDoc(doc_ref);\n    if (!doc_snap.exists()) {\n      throw new Error(\"Document not found, document id: \" + doc_id);\n    }\n    return simpleExtractData(doc_snap);\n  } catch (error) {\n    console.error(\"Error from get_document_by_id\", error);\n    return null;\n  }\n};\nvar set_document = async (collection_path, doc_id, data) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await setDoc(doc_ref, data, { merge: true });\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document by id: ${doc_id} in collection: ${collection_path}`, { error, data });\n    return false;\n  }\n};\nvar add_document = async (collection_path, data, include_id = false) => {\n  try {\n    const col_ref = collection(db, collection_path);\n    const doc_ref = await addDoc(col_ref, data);\n    if (include_id) {\n      await setDoc(doc_ref, { ...data, id: doc_ref.id }, { merge: true });\n    }\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document in collection: ${collection_path}`, error);\n    return false;\n  }\n};\nvar delete_document = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await deleteDoc(doc_ref);\n    return true;\n  } catch (error) {\n    console.error(`Failed to delete document with id ${doc_id} from collection ${collection_path}`, error);\n    return false;\n  }\n};\nvar query_document = async (collection_path, field_name, operator, value, ignore_log = false) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (documents.length < 1) {\n      throw new Error(\n        `No data to return from: \ncollection: ${collection_path}, \nfield_name: ${field_name}, \noperator: ${operator}, \nvalue: ${value}`\n      );\n    }\n    return documents[0];\n  } catch (error) {\n    if (!ignore_log) {\n      console.error(\"Error querying document:\", error);\n    }\n    return null;\n  }\n};\nvar query_documents = async (collection_path, field_name, operator, value) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${field_name} - ${operator} - ${value} `, error);\n    return [];\n  }\n};\nvar query_documents_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return [];\n  }\n};\nvar query_document_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (!documents[0]) {\n      throw new Error(\"No data returned from DB\");\n    }\n    return documents[0];\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return null;\n  }\n};\nvar snapshot = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  let collectionRef = collection(db, config.collectionName);\n  if (config.conditions) {\n    config.conditions.forEach((condition) => {\n      collectionRef = query(collectionRef, where(condition.field_name, condition.operator, condition.value));\n    });\n  }\n  const unsubscribe = onSnapshot(\n    collectionRef,\n    (snapshot2) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n        config.onFirstTime?.(documents, config);\n        config.extraParsers?.forEach((extraParser) => {\n          extraParser.onFirstTime?.(documents, config);\n        });\n        resolvePromise();\n      } else {\n        const addedDocs = [];\n        const modifiedDocs = [];\n        const removedDocs = [];\n        snapshot2.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            addedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"modified\") {\n            modifiedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"removed\") {\n            removedDocs.push(simpleExtractData(change.doc));\n          }\n        });\n        addedDocs.length && config.onAdd?.(addedDocs, config);\n        modifiedDocs.length && config.onModify?.(modifiedDocs, config);\n        removedDocs.length && config.onRemove?.(removedDocs, config);\n        config.extraParsers?.forEach((extraParser) => {\n          addedDocs.length && extraParser.onAdd?.(addedDocs, config);\n          modifiedDocs.length && extraParser.onModify?.(modifiedDocs, config);\n          removedDocs.length && extraParser.onRemove?.(removedDocs, config);\n        });\n      }\n    },\n    (error) => {\n      console.error(`Error listening to collection: ${config.collectionName}`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar snapshotDocument = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> Document in ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  const documentRef = doc(db, config.collectionName, config.documentId);\n  const unsubscribe = onSnapshot(\n    documentRef,\n    (docSnapshot) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onFirstTime?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onFirstTime?.([document2], config);\n            });\n          } else {\n            console.warn(`Document in ${config.collectionName} does not meet conditions.`);\n          }\n        } else {\n          console.warn(`Document not found in ${config.collectionName}.`);\n        }\n        resolvePromise();\n      } else {\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onModify?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onModify?.([document2], config);\n            });\n          }\n        } else {\n          config.onRemove?.([], config);\n          config.extraParsers?.forEach((extraParser) => {\n            extraParser.onRemove?.([], config);\n          });\n        }\n      }\n    },\n    (error) => {\n      console.error(`Error listening to document in ${config.collectionName}:`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar checkConditions = (document2, conditions) => {\n  if (!conditions || conditions.length === 0) return true;\n  return conditions.every((condition) => {\n    const fieldValue = document2[condition.field_name];\n    switch (condition.operator) {\n      case \"==\":\n        return fieldValue === condition.value;\n      case \"!=\":\n        return fieldValue !== condition.value;\n      case \"<\":\n        return fieldValue < condition.value;\n      case \"<=\":\n        return fieldValue <= condition.value;\n      case \">\":\n        return fieldValue > condition.value;\n      case \">=\":\n        return fieldValue >= condition.value;\n      case \"array-contains\":\n        return Array.isArray(fieldValue) && fieldValue.includes(condition.value);\n      default:\n        return false;\n    }\n  });\n};\nvar cleanNxSites = async () => {\n  const clients = (await get_all_documents(\"nx-clients\")).map((v) => v.id);\n  const sites = await get_all_documents(\"nx-sites\");\n  const allSitesToDelete = sites.filter((v) => !clients.includes(v.client));\n  console.log(\"allSitesToDelete\", allSitesToDelete);\n  allSitesToDelete.forEach(async (v) => {\n    await delete_document(\"nx-sites\", v.id);\n    console.log(`Site ${v.id} deleted.`);\n  });\n};\n\n// src/helpers/global.ts\nimport { CountryOptions } from \"akeyless-types-commons\";\nimport axios from \"axios\";\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nvar isInternational = (phone_number) => {\n  return phone_number.startsWith(\"+\");\n};\nvar isInternationalIsraelPhone = (phone_number) => {\n  return phone_number.startsWith(\"+9725\");\n};\nvar local_israel_phone_format = (international_number) => {\n  return international_number.replace(\"+972\", \"0\");\n};\nvar international_israel_phone_format = (phone) => {\n  const validNumber = phone.slice(1, phone.length);\n  return \"+972\".concat(validNumber);\n};\nvar displayFormatPhoneNumber = (phoneNumber) => {\n  if (isInternational(phoneNumber)) {\n    const phoneNumberObject = parsePhoneNumberFromString(phoneNumber);\n    if (!phoneNumberObject) {\n      return phoneNumber;\n    }\n    return phoneNumberObject.formatInternational().replace(/\\s/g, \"-\");\n  }\n  return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, \"$1-$2-$3\");\n};\nvar is_iccid = (number) => {\n  if (number.length < 19 || number.length > 22) return false;\n  if (!/^\\d+$/.test(number)) return false;\n  if (!number.startsWith(\"89\")) return false;\n  return true;\n};\n\n// src/helpers/global.ts\nvar calculateBearing = (startLat, startLng, endLat, endLng) => {\n  if (startLat === endLat || startLng === endLng) {\n    return 0;\n  }\n  if (startLat === void 0 || startLng === void 0 || endLat === void 0 || endLng === void 0) {\n    return 0;\n  }\n  const startLatRad = startLat * Math.PI / 180;\n  const startLngRad = startLng * Math.PI / 180;\n  const endLatRad = endLat * Math.PI / 180;\n  const endLngRad = endLng * Math.PI / 180;\n  const dLon = endLngRad - startLngRad;\n  const y = Math.sin(dLon) * Math.cos(endLatRad);\n  const x = Math.cos(startLatRad) * Math.sin(endLatRad) - Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLon);\n  const bearing = Math.atan2(y, x) * 180 / Math.PI;\n  return (bearing + 360) % 360;\n};\nvar renderOnce = () => {\n  return true;\n};\nvar getUserCountryByIp = async () => {\n  try {\n    const response = await axios.get(\"https://ipapi.co/json/\");\n    return (response.data.country_code || CountryOptions.IL).toLowerCase();\n  } catch (error) {\n    console.error(\"Error fetching Country:\", error);\n    return CountryOptions.IL;\n  }\n};\nvar parsePermissions = (object) => {\n  if (!object?.features) {\n    return {};\n  }\n  const features = object.features;\n  let result = {};\n  features.forEach((feature) => {\n    if (!feature.includes(\"__\")) {\n      return;\n    }\n    const [featureType, featureName] = feature.split(\"__\");\n    if (!featureType || !featureName) {\n      return;\n    }\n    if (!result[featureType]) {\n      result[featureType] = {};\n    }\n    result[featureType][featureName] = true;\n  });\n  return result;\n};\nvar initializeUserPermissions = async ({ phoneNumber, firstTimeArray, getUpdatePermissions }) => {\n  let unsubscribe = null;\n  let permissions = {};\n  try {\n    const { promise, unsubscribe: unsubscribeSnapshot } = snapshot(\n      {\n        collectionName: \"nx-users\",\n        conditions: [{ field_name: \"phone_number\", operator: \"in\", value: [phoneNumber, local_israel_phone_format(phoneNumber)] }],\n        onFirstTime: (docs) => {\n          if (!docs.length) {\n            throw new Error(\"User not found\");\n          }\n          permissions = parsePermissions(docs[0]);\n          getUpdatePermissions(parsePermissions(docs[0]));\n        },\n        onModify: (docs) => {\n          getUpdatePermissions(parsePermissions(docs[0]));\n        }\n      },\n      firstTimeArray\n    );\n    unsubscribe = unsubscribeSnapshot;\n    await promise;\n    return { unsubscribe, permissions };\n  } catch (error) {\n    if (unsubscribe) {\n      unsubscribe();\n    }\n    console.error(\"Error initializing user permissions:\", error.message);\n    throw error;\n  }\n};\nvar userNameFormat = (user) => {\n  return `${user?.first_name || \"\"} ${user?.last_name || \"\"}`.trim();\n};\nvar multiStringFormat = (str1, str2, str3) => {\n  return `${str1} ${str2 || \"\"} ${str3 || \"\"}`.trim();\n};\n\n// src/helpers/forms.ts\nimport XRegExp from \"xregexp\";\nvar textRegex = XRegExp(\"[^\\\\p{L}\\\\s-]\", \"gu\");\nvar numbersRegex = XRegExp(\"[^0-9\\\\s-+]\", \"g\");\nvar numbersOnlyRegex = XRegExp(\"[^0-9]\", \"g\");\nvar priceRegex = XRegExp(\"[^0-9.]\", \"g\");\nvar emailRegex = XRegExp(\"[^\\\\p{L}0-9.@\\\\s-]\", \"gu\");\nvar colorRegex = XRegExp(\"[^#0-9A-Fa-f]\", \"g\");\nvar carsRegex = XRegExp(\"[^\\\\p{L}0-9,_]\", \"gu\");\nvar textNumbersRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s+\\\\-]\", \"gu\");\nvar addressRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,\\\\-]\", \"gu\");\nvar chartsRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,_@!\\\\-]\", \"gu\");\nvar handleChange = (e) => {\n  e.target.setCustomValidity(\"\");\n  const validation = e.target.getAttribute(\"data-validation\");\n  if (validation === \"text\") {\n    e.target.value = XRegExp.replace(e.target.value, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    e.target.value = XRegExp.replace(e.target.value, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    e.target.value = XRegExp.replace(e.target.value, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    e.target.value = XRegExp.replace(e.target.value, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    e.target.value = XRegExp.replace(e.target.value, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    e.target.value = XRegExp.replace(e.target.value, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    e.target.value = XRegExp.replace(e.target.value, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    e.target.value = XRegExp.replace(e.target.value, chartsRegex, \"\");\n  }\n};\nvar handlePaste = (e) => {\n  const validation = e.currentTarget.getAttribute(\"data-validation\");\n  let pasteData = e.clipboardData.getData(\"text\");\n  if (validation === \"text\") {\n    pasteData = XRegExp.replace(pasteData, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    pasteData = XRegExp.replace(pasteData, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    pasteData = XRegExp.replace(pasteData, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    pasteData = XRegExp.replace(pasteData, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    pasteData = XRegExp.replace(pasteData, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    pasteData = XRegExp.replace(pasteData, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    pasteData = XRegExp.replace(pasteData, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    pasteData = XRegExp.replace(pasteData, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    pasteData = XRegExp.replace(pasteData, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    pasteData = XRegExp.replace(pasteData, chartsRegex, \"\");\n  }\n  e.preventDefault();\n  document.execCommand(\"insertText\", false, pasteData);\n};\nvar handleInvalid = (e, requireError) => {\n  e.target.setCustomValidity(requireError || \"This filed is required !\");\n};\nvar useValidation = (validationType, requireError) => {\n  return {\n    onChange: handleChange,\n    onPaste: handlePaste,\n    onInvalid: (e) => handleInvalid(e, requireError),\n    \"data-validation\": validationType\n  };\n};\nvar getFormElementValue = (form, name) => {\n  return form.elements.namedItem(name)?.value || \"\";\n};\nvar parseMultiSelectInput = (input) => {\n  const value = JSON.parse(input) || [];\n  return value.map((v) => v.value);\n};\n\n// src/helpers/store.ts\nvar setState = (updater, set, stateName) => {\n  return set((state) => ({\n    [stateName]: typeof updater === \"function\" ? updater(state[stateName]) : updater\n  }));\n};\nvar createSelectors = (store) => {\n  let selectors = {};\n  for (let k of Object.keys(store.getState())) {\n    selectors[k] = () => store((s) => s[k]);\n  }\n  return selectors;\n};\nvar useStoreValues = (store, keys) => {\n  const result = {};\n  keys.forEach((key) => {\n    result[key] = store.use[key]();\n  });\n  return result;\n};\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nfunction cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\nexport {\n  add_document,\n  addressRegex,\n  auth,\n  calculateBearing,\n  carsRegex,\n  chartsRegex,\n  cleanNxSites,\n  cn,\n  collections,\n  colorRegex,\n  createSelectors,\n  db,\n  delete_document,\n  displayFormatPhoneNumber,\n  emailRegex,\n  extractAlertsData,\n  extractBoardsData,\n  extractCanbusData,\n  extractCarsData,\n  extractClientData,\n  extractLocationData,\n  extractSiteData,\n  fire_base_TIME_TEMP,\n  formatCarNumber,\n  getFormElementValue,\n  getUserCountryByIp,\n  get_all_documents,\n  get_document_by_id,\n  handleChange,\n  handleInvalid,\n  handlePaste,\n  initializeUserPermissions,\n  international_israel_phone_format,\n  isInternational,\n  isInternationalIsraelPhone,\n  is_iccid,\n  local_israel_phone_format,\n  multiStringFormat,\n  numbersOnlyRegex,\n  numbersRegex,\n  parseMultiSelectInput,\n  parsePermissions,\n  priceRegex,\n  query_document,\n  query_document_by_conditions,\n  query_documents,\n  query_documents_by_conditions,\n  renderOnce,\n  setState,\n  set_document,\n  simpleExtractData,\n  snapshot,\n  snapshotDocument,\n  storage,\n  textNumbersRegex,\n  textRegex,\n  useStoreValues,\n  useValidation,\n  userNameFormat\n};\n"]}