{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\helpers\\index.mjs"],"names":[],"mappings":"AAAA,0BAA0B","sourcesContent":["// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore\n} from \"firebase/firestore\";\n\n// src/helpers/cars.ts\nvar formatCarNumber = (car_number) => {\n  var cn = car_number;\n  if (cn?.length == 8) return `${cn[0]}${cn[1]}${cn[2]}-${cn[3]}${cn[4]}-${cn[5]}${cn[6]}${cn[7]}`;\n  if (cn?.length == 7) return `${cn[0]}${cn[1]}-${cn[2]}${cn[3]}${cn[4]}-${cn[5]}${cn[6]}`;\n  if (cn?.length == 6) return `${cn[0]}${cn[1]}-${cn[2]}${cn[3]}-${cn[4]}${cn[5]}`;\n  if (cn?.length == 5) return `${cn[0]}-${cn[1]}${cn[2]}-${cn[3]}${cn[4]}`;\n  return cn;\n};\n\n// src/helpers/firebase.ts\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    return { db: db2, auth: auth2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar extractAlertsData = (doc2) => {\n  const data = doc2.data();\n  const { car_number, timestamp } = data;\n  return {\n    ...data,\n    timestamp_seconds: timestamp.seconds,\n    timestamp_ui: moment.unix(timestamp.seconds).format(\"DD/MM/YY HH:mm\"),\n    car_number: formatCarNumber(car_number)\n  };\n};\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar extractSiteData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"DD.MM.YYYY - HH:mm\"),\n    updated: moment(dateUpdated).format(\"DD.MM.YYYY - HH:mm\")\n  };\n};\nvar extractClientData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"HH:mm  DD/MM/YY\"),\n    updated: moment(dateUpdated).format(\"HH:mm  DD/MM/YY\")\n  };\n};\nvar extractBoardsData = (doc2) => {\n  const data = doc2.data();\n  const dateUploaded = typeof data.uploaded === \"string\" ? data.uploaded : moment.unix(data.uploaded?.seconds).format(\"DD/MM/YY HH:mm\");\n  return {\n    ...data,\n    id: doc2.id,\n    uploaded: dateUploaded\n  };\n};\nvar extractCarsData = (doc2) => {\n  const carData = doc2.data();\n  let icon;\n  const gov_info = carData.gov_info;\n  if (gov_info) {\n    if (carData.icon) {\n      icon = carData.icon;\n    } else if (gov_info.vehicle_type === \"atv\") {\n      icon = \"truck\";\n    } else if (gov_info.vehicle_type === \"motorcycle\") {\n      icon = \"motorcycle\";\n    } else {\n      icon = \"car\";\n    }\n  } else {\n    icon = \"car\";\n  }\n  return {\n    ...carData,\n    id: doc2.id,\n    brand: carData.brand || carData.manufacturer,\n    car_number: carData.carId,\n    icon\n  };\n};\nvar extractCanbusData = (doc2) => {\n  const data = doc2.data();\n  const newDate = new Date(data.timestamp.seconds * 1e3);\n  return {\n    ...data,\n    date_ui: moment(newDate).format(\"DD/MM/YYYY - HH:mm\")\n  };\n};\nvar extractLocationData = (doc2) => {\n  const locationData = doc2.data();\n  const { latitude, longitude, spd, timestamp, prev_latitude, prev_longitude } = locationData;\n  return {\n    ...locationData,\n    id: doc2.id,\n    lat: latitude,\n    lng: longitude,\n    prev_lat: prev_latitude,\n    prev_lng: prev_longitude,\n    timestamp: timestamp?.seconds,\n    spd: Number(spd).toFixed(0)\n  };\n};\nvar get_all_documents = async (collection_path) => {\n  try {\n    const snapshot = await getDocs(collection(db, collection_path));\n    const documents = snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    return [];\n  }\n};\nvar get_document_by_id = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    const doc_snap = await getDoc(doc_ref);\n    if (!doc_snap.exists()) {\n      throw new Error(\"Document not found, document id: \" + doc_id);\n    }\n    return simpleExtractData(doc_snap);\n  } catch (error) {\n    console.error(\"Error from get_document_by_id\", error);\n    return null;\n  }\n};\nvar set_document = async (collection_path, doc_id, data) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await setDoc(doc_ref, data, { merge: true });\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document by id: ${doc_id} in collection: ${collection_path}`, { error, data });\n    return false;\n  }\n};\nvar add_document = async (collection_path, data, include_id = false) => {\n  try {\n    const col_ref = collection(db, collection_path);\n    const doc_ref = await addDoc(col_ref, data);\n    if (include_id) {\n      await setDoc(doc_ref, { ...data, id: doc_ref.id }, { merge: true });\n    }\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document in collection: ${collection_path}`, error);\n    return false;\n  }\n};\nvar delete_document = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await deleteDoc(doc_ref);\n    return true;\n  } catch (error) {\n    console.error(`Failed to delete document with id ${doc_id} from collection ${collection_path}`, error);\n    return false;\n  }\n};\nvar query_document = async (collection_path, field_name, operator, value, ignore_log = false) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (documents.length < 1) {\n      throw new Error(\n        `No data to return from: \ncollection: ${collection_path}, \nfield_name: ${field_name}, \noperator: ${operator}, \nvalue: ${value}`\n      );\n    }\n    return documents[0];\n  } catch (error) {\n    if (!ignore_log) {\n      console.error(\"Error querying document:\", error);\n    }\n    return null;\n  }\n};\nvar query_documents = async (collection_path, field_name, operator, value) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${field_name} - ${operator} - ${value} `, error);\n    return [];\n  }\n};\nvar query_documents_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return [];\n  }\n};\nvar query_document_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (!documents[0]) {\n      throw new Error(\"No data returned from DB\");\n    }\n    return documents[0];\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return null;\n  }\n};\n\n// src/helpers/global.ts\nvar calculateBearing = (startLat, startLng, endLat, endLng) => {\n  if (startLat === endLat || startLng === endLng) {\n    return 0;\n  }\n  if (startLat === void 0 || startLng === void 0 || endLat === void 0 || endLng === void 0) {\n    return 0;\n  }\n  const startLatRad = startLat * Math.PI / 180;\n  const startLngRad = startLng * Math.PI / 180;\n  const endLatRad = endLat * Math.PI / 180;\n  const endLngRad = endLng * Math.PI / 180;\n  const dLon = endLngRad - startLngRad;\n  const y = Math.sin(dLon) * Math.cos(endLatRad);\n  const x = Math.cos(startLatRad) * Math.sin(endLatRad) - Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLon);\n  const bearing = Math.atan2(y, x) * 180 / Math.PI;\n  return (bearing + 360) % 360;\n};\n\n// src/helpers/forms.ts\nvar handleInvalid = (e, requireError) => {\n  e.target.setCustomValidity(requireError || \"This filed is required !\");\n};\nvar handleChange = (e) => {\n  e.target.setCustomValidity(\"\");\n  const validation = e.target.getAttribute(\"data-validation\");\n  if (validation === \"text\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת\\- ]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"numbers\") {\n    const cleanedValue = e.target.value.replace(/[^0-9\\- +]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"numbersOnly\") {\n    const cleanedValue = e.target.value.replace(/[^0-9]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"price\") {\n    const cleanedValue = e.target.value.replace(/[^0-9\\.]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"textNumbers\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת0-9\\- +]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"email\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת0-9.@\\- ]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"color\") {\n    const cleanedValue = e.target.value.replace(/[^#0-9A-Fa-f]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"address\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת0-9\\-., ]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"cars\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת0-9,_]/g, \"\");\n    e.target.value = cleanedValue;\n  } else if (validation === \"charts\") {\n    const cleanedValue = e.target.value.replace(/[^a-zA-Zא-ת0-9\\-.,_@! ]/g, \"\");\n    e.target.value = cleanedValue;\n  } else {\n    e.target.value = e.target.value;\n  }\n};\nvar handlePaste = (e) => {\n  const validation = e.currentTarget.getAttribute(\"data-validation\");\n  let pasteData = e.clipboardData.getData(\"text\");\n  if (validation === \"text\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת\\- ]/g, \"\");\n  } else if (validation === \"numbers\") {\n    pasteData = pasteData.replace(/[^0-9\\- +]/g, \"\");\n  } else if (validation === \"numbersOnly\") {\n    pasteData = pasteData.replace(/[^0-9]/g, \"\");\n  } else if (validation === \"price\") {\n    pasteData = pasteData.replace(/[^0-9\\.]/g, \"\");\n  } else if (validation === \"textNumbers\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת0-9\\- +]/g, \"\");\n  } else if (validation === \"email\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת0-9.@\\- ]/g, \"\");\n  } else if (validation === \"color\") {\n    pasteData = pasteData.replace(/[^#0-9A-Fa-f]/g, \"\");\n  } else if (validation === \"address\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת0-9\\-., ]/g, \"\");\n  } else if (validation === \"cars\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת0-9,_]/g, \"\");\n  } else if (validation === \"charts\") {\n    pasteData = pasteData.replace(/[^a-zA-Zא-ת0-9\\-.,_@! ]/g, \"\");\n  }\n  e.preventDefault();\n  document.execCommand(\"insertText\", false, pasteData);\n};\nvar useValidation = (validationType, requireError) => {\n  return {\n    onChange: handleChange,\n    onPaste: handlePaste,\n    onInvalid: (e) => handleInvalid(e, requireError),\n    \"data-validation\": validationType\n  };\n};\n\n// src/helpers/store.ts\nvar setState = (updater, set, stateName) => {\n  return set((state) => ({\n    [stateName]: typeof updater === \"function\" ? updater(state[stateName]) : updater\n  }));\n};\nvar createSelectors = (store) => {\n  let selectors = {};\n  for (let k of Object.keys(store.getState())) {\n    selectors[k] = () => store((s) => s[k]);\n  }\n  return selectors;\n};\nvar useStoreValues = (store, keys) => {\n  const result = {};\n  keys.forEach((key) => {\n    result[key] = store.use[key]();\n  });\n  return result;\n};\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nvar isInternational = (phone_number) => {\n  return phone_number.startsWith(\"+\");\n};\nvar isInternationalIsraelPhone = (phone_number) => {\n  return phone_number.startsWith(\"+9725\");\n};\nvar local_israel_phone_format = (international_number) => {\n  return international_number.replace(\"+972\", \"0\");\n};\nvar international_israel_phone_format = (phone) => {\n  const validNumber = phone.slice(1, phone.length);\n  return \"+972\".concat(validNumber);\n};\nvar displayFormatPhoneNumber = (phoneNumber) => {\n  if (isInternational(phoneNumber)) {\n    const phoneNumberObject = parsePhoneNumberFromString(phoneNumber);\n    if (!phoneNumberObject) {\n      return phoneNumber;\n    }\n    return phoneNumberObject.formatInternational().replace(/\\s/g, \"-\");\n  }\n  return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, \"$1-$2-$3\");\n};\nexport {\n  add_document,\n  auth,\n  calculateBearing,\n  collections,\n  createSelectors,\n  db,\n  delete_document,\n  displayFormatPhoneNumber,\n  extractAlertsData,\n  extractBoardsData,\n  extractCanbusData,\n  extractCarsData,\n  extractClientData,\n  extractLocationData,\n  extractSiteData,\n  fire_base_TIME_TEMP,\n  formatCarNumber,\n  get_all_documents,\n  get_document_by_id,\n  handleChange,\n  handleInvalid,\n  handlePaste,\n  international_israel_phone_format,\n  isInternational,\n  isInternationalIsraelPhone,\n  local_israel_phone_format,\n  query_document,\n  query_document_by_conditions,\n  query_documents,\n  query_documents_by_conditions,\n  setState,\n  set_document,\n  simpleExtractData,\n  useStoreValues,\n  useValidation\n};\n"]}