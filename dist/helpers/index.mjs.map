{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\helpers\\index.mjs"],"names":["moment","initializeApp","getAuth","addDoc","collection","isNodeEnv","process","env","deleteDoc","doc","getDoc","getDocs","query","setDoc","Timestamp","where","getFirestore","onSnapshot","formatCarNumber","car_number","cn2","length","initApp","firebaseConfig","apiKey","NEXT_PUBLIC_API_KEY","VITE_API_KEY","authDomain","NEXT_PUBLIC_AUTH_DOMAIN","VITE_AUTH_DOMAIN","projectId","NEXT_PUBLIC_PROJECT_ID","VITE_PROJECT_ID","messagingSenderId","NEXT_PUBLIC_MESSAGING_SENDER_ID","VITE_MESSAGING_SENDER_ID","appId","NEXT_PUBLIC_APP_ID","app","auth2","storage2","getStorage","db2","db","storage","VITE_APP_ID","console","error","auth","collections","clients","cars","ermEvents","polygonEvents","polygonCars","tripsDetails","erm2Events","ruptelaEvents","polygons","canbus","states","app_pro_commands_queue","trips","audit","nx_settings","translations","users","nx_cars","boards","protection_types","board_types","charge_capacities","fire_base_TIME_TEMP","now","extractAlertsData","doc2","data","timestamp","timestamp_seconds","seconds","timestamp_ui","unix","format","simpleExtractData","docData","id","extractSiteData","dateUpdated","Date","updated","nanoseconds","dateCreated","created","extractClientData","extractBoardsData","uploaded","dateUploaded","extractCarsData","carData","icon","gov_info","vehicle_type","brand","manufacturer","carId","extractCanbusData","newDate","date_ui","extractLocationData","locationData","latitude","longitude","spd","prev_latitude","prev_longitude","lat","lng","prev_lat","prev_lng","Number","toFixed","get_all_documents","collection_path","snapshot2","documents","docs","map","get_document_by_id","doc_id","doc_ref","doc_snap","exists","Error","set_document","merge","add_document","include_id","col_ref","delete_document","query_document","field_name","operator","value","ignore_log","q","query_snapshot","query_documents","query_documents_by_conditions","db_query","where_conditions","forEach","condition","JSON","stringify","query_document_by_conditions"],"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","sourcesContent":["// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore,\n  onSnapshot\n} from \"firebase/firestore\";\n\n// src/helpers/cars.ts\nvar formatCarNumber = (car_number) => {\n  var cn2 = car_number;\n  if (cn2?.length == 8) return `${cn2[0]}${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}${cn2[7]}`;\n  if (cn2?.length == 7) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}`;\n  if (cn2?.length == 6) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}-${cn2[4]}${cn2[5]}`;\n  if (cn2?.length == 5) return `${cn2[0]}-${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}`;\n  return cn2;\n};\n\n// src/helpers/firebase.ts\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    const storage2 = getStorage(app);\n    return { db: db2, auth: auth2, storage: storage2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth, storage } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar extractAlertsData = (doc2) => {\n  const data = doc2.data();\n  const { car_number, timestamp } = data;\n  return {\n    ...data,\n    timestamp_seconds: timestamp.seconds,\n    timestamp_ui: moment.unix(timestamp.seconds).format(\"DD/MM/YY HH:mm\"),\n    car_number: formatCarNumber(car_number)\n  };\n};\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar extractSiteData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"DD.MM.YYYY - HH:mm\"),\n    updated: moment(dateUpdated).format(\"DD.MM.YYYY - HH:mm\")\n  };\n};\nvar extractClientData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"HH:mm  DD/MM/YY\"),\n    updated: moment(dateUpdated).format(\"HH:mm  DD/MM/YY\")\n  };\n};\nvar extractBoardsData = (doc2) => {\n  const data = doc2.data();\n  const dateUploaded = typeof data.uploaded === \"string\" ? data.uploaded : moment.unix(data.uploaded?.seconds).format(\"DD/MM/YY HH:mm\");\n  return {\n    ...data,\n    id: doc2.id,\n    uploaded: dateUploaded\n  };\n};\nvar extractCarsData = (doc2) => {\n  const carData = doc2.data();\n  let icon;\n  const gov_info = carData.gov_info;\n  if (gov_info) {\n    if (carData.icon) {\n      icon = carData.icon;\n    } else if (gov_info.vehicle_type === \"atv\") {\n      icon = \"truck\";\n    } else if (gov_info.vehicle_type === \"motorcycle\") {\n      icon = \"motorcycle\";\n    } else {\n      icon = \"car\";\n    }\n  } else {\n    icon = \"car\";\n  }\n  return {\n    ...carData,\n    id: doc2.id,\n    brand: carData.brand || carData.manufacturer,\n    car_number: carData.carId,\n    icon\n  };\n};\nvar extractCanbusData = (doc2) => {\n  const data = doc2.data();\n  const newDate = new Date(data.timestamp.seconds * 1e3);\n  return {\n    ...data,\n    date_ui: moment(newDate).format(\"DD/MM/YYYY - HH:mm\")\n  };\n};\nvar extractLocationData = (doc2) => {\n  const locationData = doc2.data();\n  const { latitude, longitude, spd, timestamp, prev_latitude, prev_longitude } = locationData;\n  return {\n    ...locationData,\n    id: doc2.id,\n    lat: latitude,\n    lng: longitude,\n    prev_lat: prev_latitude,\n    prev_lng: prev_longitude,\n    timestamp: timestamp?.seconds,\n    spd: Number(spd).toFixed(0)\n  };\n};\nvar get_all_documents = async (collection_path) => {\n  try {\n    const snapshot2 = await getDocs(collection(db, collection_path));\n    const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    return [];\n  }\n};\nvar get_document_by_id = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    const doc_snap = await getDoc(doc_ref);\n    if (!doc_snap.exists()) {\n      throw new Error(\"Document not found, document id: \" + doc_id);\n    }\n    return simpleExtractData(doc_snap);\n  } catch (error) {\n    console.error(\"Error from get_document_by_id\", error);\n    return null;\n  }\n};\nvar set_document = async (collection_path, doc_id, data) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await setDoc(doc_ref, data, { merge: true });\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document by id: ${doc_id} in collection: ${collection_path}`, { error, data });\n    return false;\n  }\n};\nvar add_document = async (collection_path, data, include_id = false) => {\n  try {\n    const col_ref = collection(db, collection_path);\n    const doc_ref = await addDoc(col_ref, data);\n    if (include_id) {\n      await setDoc(doc_ref, { ...data, id: doc_ref.id }, { merge: true });\n    }\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document in collection: ${collection_path}`, error);\n    return false;\n  }\n};\nvar delete_document = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await deleteDoc(doc_ref);\n    return true;\n  } catch (error) {\n    console.error(`Failed to delete document with id ${doc_id} from collection ${collection_path}`, error);\n    return false;\n  }\n};\nvar query_document = async (collection_path, field_name, operator, value, ignore_log = false) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (documents.length < 1) {\n      throw new Error(\n        `No data to return from: \ncollection: ${collection_path}, \nfield_name: ${field_name}, \noperator: ${operator}, \nvalue: ${value}`\n      );\n    }\n    return documents[0];\n  } catch (error) {\n    if (!ignore_log) {\n      console.error(\"Error querying document:\", error);\n    }\n    return null;\n  }\n};\nvar query_documents = async (collection_path, field_name, operator, value) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${field_name} - ${operator} - ${value} `, error);\n    return [];\n  }\n};\nvar query_documents_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return [];\n  }\n};\nvar query_document_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (!documents[0]) {\n      throw new Error(\"No data returned from DB\");\n    }\n    return documents[0];\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return null;\n  }\n};\nvar snapshot = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  let collectionRef = collection(db, config.collectionName);\n  if (config.conditions) {\n    config.conditions.forEach((condition) => {\n      collectionRef = query(collectionRef, where(condition.field_name, condition.operator, condition.value));\n    });\n  }\n  const unsubscribe = onSnapshot(\n    collectionRef,\n    (snapshot2) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n        config.onFirstTime?.(documents, config);\n        config.extraParsers?.forEach((extraParser) => {\n          extraParser.onFirstTime?.(documents, config);\n        });\n        resolvePromise();\n      } else {\n        const addedDocs = [];\n        const modifiedDocs = [];\n        const removedDocs = [];\n        snapshot2.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            addedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"modified\") {\n            modifiedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"removed\") {\n            removedDocs.push(simpleExtractData(change.doc));\n          }\n        });\n        addedDocs.length && config.onAdd?.(addedDocs, config);\n        modifiedDocs.length && config.onModify?.(modifiedDocs, config);\n        removedDocs.length && config.onRemove?.(removedDocs, config);\n        config.extraParsers?.forEach((extraParser) => {\n          addedDocs.length && extraParser.onAdd?.(addedDocs, config);\n          modifiedDocs.length && extraParser.onModify?.(modifiedDocs, config);\n          removedDocs.length && extraParser.onRemove?.(removedDocs, config);\n        });\n      }\n    },\n    (error) => {\n      console.error(`Error listening to collection: ${config.collectionName}`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar snapshotDocument = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> Document in ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  const documentRef = doc(db, config.collectionName, config.documentId);\n  const unsubscribe = onSnapshot(\n    documentRef,\n    (docSnapshot) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onFirstTime?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onFirstTime?.([document2], config);\n            });\n          } else {\n            console.warn(`Document in ${config.collectionName} does not meet conditions.`);\n          }\n        } else {\n          console.warn(`Document not found in ${config.collectionName}.`);\n        }\n        resolvePromise();\n      } else {\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onModify?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onModify?.([document2], config);\n            });\n          }\n        } else {\n          config.onRemove?.([], config);\n          config.extraParsers?.forEach((extraParser) => {\n            extraParser.onRemove?.([], config);\n          });\n        }\n      }\n    },\n    (error) => {\n      console.error(`Error listening to document in ${config.collectionName}:`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar checkConditions = (document2, conditions) => {\n  if (!conditions || conditions.length === 0) return true;\n  return conditions.every((condition) => {\n    const fieldValue = document2[condition.field_name];\n    switch (condition.operator) {\n      case \"==\":\n        return fieldValue === condition.value;\n      case \"!=\":\n        return fieldValue !== condition.value;\n      case \"<\":\n        return fieldValue < condition.value;\n      case \"<=\":\n        return fieldValue <= condition.value;\n      case \">\":\n        return fieldValue > condition.value;\n      case \">=\":\n        return fieldValue >= condition.value;\n      case \"array-contains\":\n        return Array.isArray(fieldValue) && fieldValue.includes(condition.value);\n      default:\n        return false;\n    }\n  });\n};\nvar cleanNxSites = async () => {\n  const clients = (await get_all_documents(\"nx-clients\")).map((v) => v.id);\n  const sites = await get_all_documents(\"nx-sites\");\n  const allSitesToDelete = sites.filter((v) => !clients.includes(v.client));\n  console.log(\"allSitesToDelete\", allSitesToDelete);\n  allSitesToDelete.forEach(async (v) => {\n    await delete_document(\"nx-sites\", v.id);\n    console.log(`Site ${v.id} deleted.`);\n  });\n};\n\n// src/helpers/global.ts\nimport { CountryOptions } from \"akeyless-types-commons\";\nimport axios from \"axios\";\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nvar isInternational = (phone_number) => {\n  return phone_number.startsWith(\"+\");\n};\nvar isInternationalIsraelPhone = (phone_number) => {\n  return phone_number.startsWith(\"+9725\");\n};\nvar local_israel_phone_format = (international_number) => {\n  return international_number.replace(\"+972\", \"0\");\n};\nvar international_israel_phone_format = (phone) => {\n  const validNumber = phone.slice(1, phone.length);\n  return \"+972\".concat(validNumber);\n};\nvar displayFormatPhoneNumber = (phoneNumber) => {\n  if (isInternational(phoneNumber)) {\n    const phoneNumberObject = parsePhoneNumberFromString(phoneNumber);\n    if (!phoneNumberObject) {\n      return phoneNumber;\n    }\n    return phoneNumberObject.formatInternational().replace(/\\s/g, \"\");\n  }\n  return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, \"$1-$2-$3\");\n};\nvar is_iccid = (number) => {\n  if (number.length < 19 || number.length > 22) return false;\n  if (!/^\\d+$/.test(number)) return false;\n  if (!number.startsWith(\"89\")) return false;\n  return true;\n};\n\n// src/helpers/global.ts\nvar calculateBearing = (startLat, startLng, endLat, endLng) => {\n  if (startLat === endLat || startLng === endLng) {\n    return 0;\n  }\n  if (startLat === void 0 || startLng === void 0 || endLat === void 0 || endLng === void 0) {\n    return 0;\n  }\n  const startLatRad = startLat * Math.PI / 180;\n  const startLngRad = startLng * Math.PI / 180;\n  const endLatRad = endLat * Math.PI / 180;\n  const endLngRad = endLng * Math.PI / 180;\n  const dLon = endLngRad - startLngRad;\n  const y = Math.sin(dLon) * Math.cos(endLatRad);\n  const x = Math.cos(startLatRad) * Math.sin(endLatRad) - Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLon);\n  const bearing = Math.atan2(y, x) * 180 / Math.PI;\n  return (bearing + 360) % 360;\n};\nvar renderOnce = () => {\n  return true;\n};\nvar getUserCountryByIp = async () => {\n  try {\n    const response = await axios.get(\"https://ipapi.co/json/\");\n    return (response.data.country_code || CountryOptions.IL).toLowerCase();\n  } catch (error) {\n    console.error(\"Error fetching Country:\", error);\n    return CountryOptions.IL;\n  }\n};\nvar parsePermissions = (object) => {\n  if (!object?.features) {\n    return {};\n  }\n  const features = object.features;\n  let result = {};\n  features.forEach((feature) => {\n    if (!feature.includes(\"__\")) {\n      return;\n    }\n    const [featureType, featureName] = feature.split(\"__\");\n    if (!featureType || !featureName) {\n      return;\n    }\n    if (!result[featureType]) {\n      result[featureType] = {};\n    }\n    result[featureType][featureName] = true;\n  });\n  return result;\n};\nvar initializeUserPermissions = async ({ phoneNumber, firstTimeArray, getUpdatePermissions }) => {\n  let unsubscribe = null;\n  let permissions = {};\n  try {\n    const { promise, unsubscribe: unsubscribeSnapshot } = snapshot(\n      {\n        collectionName: \"nx-users\",\n        conditions: [{ field_name: \"phone_number\", operator: \"in\", value: [phoneNumber, local_israel_phone_format(phoneNumber)] }],\n        onFirstTime: (docs) => {\n          if (!docs.length) {\n            throw new Error(\"User not found\");\n          }\n          permissions = parsePermissions(docs[0]);\n          getUpdatePermissions(parsePermissions(docs[0]));\n        },\n        onModify: (docs) => {\n          getUpdatePermissions(parsePermissions(docs[0]));\n        }\n      },\n      firstTimeArray\n    );\n    unsubscribe = unsubscribeSnapshot;\n    await promise;\n    return { unsubscribe, permissions };\n  } catch (error) {\n    if (unsubscribe) {\n      unsubscribe();\n    }\n    console.error(\"Error initializing user permissions:\", error.message);\n    throw error;\n  }\n};\nvar userNameFormat = (user) => {\n  return `${user?.first_name || \"\"} ${user?.last_name || \"\"}`.trim();\n};\nvar multiStringFormat = (str1, str2, str3) => {\n  return `${str1} ${str2 || \"\"} ${str3 || \"\"}`.trim();\n};\nvar getLocationUrl = (lang, lat) => {\n  return `https://www.google.com/maps?q=${lang},${lat}`;\n};\n\n// src/helpers/forms.ts\nimport XRegExp from \"xregexp\";\nvar textRegex = XRegExp(\"[^\\\\p{L}\\\\s-]\", \"gu\");\nvar numbersRegex = XRegExp(\"[^0-9\\\\s-+]\", \"g\");\nvar numbersOnlyRegex = XRegExp(\"[^0-9]\", \"g\");\nvar priceRegex = XRegExp(\"[^0-9.]\", \"g\");\nvar emailRegex = XRegExp(\"[^\\\\p{L}0-9.@\\\\s-]\", \"gu\");\nvar colorRegex = XRegExp(\"[^#0-9A-Fa-f]\", \"g\");\nvar carsRegex = XRegExp(\"[^\\\\p{L}0-9,_]\", \"gu\");\nvar textNumbersRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s+\\\\-]\", \"gu\");\nvar addressRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,\\\\-]\", \"gu\");\nvar chartsRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,_@!\\\\-]\", \"gu\");\nvar handleChange = (e) => {\n  e.target.setCustomValidity(\"\");\n  const validation = e.target.getAttribute(\"data-validation\");\n  if (validation === \"text\") {\n    e.target.value = XRegExp.replace(e.target.value, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    e.target.value = XRegExp.replace(e.target.value, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    e.target.value = XRegExp.replace(e.target.value, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    e.target.value = XRegExp.replace(e.target.value, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    e.target.value = XRegExp.replace(e.target.value, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    e.target.value = XRegExp.replace(e.target.value, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    e.target.value = XRegExp.replace(e.target.value, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    e.target.value = XRegExp.replace(e.target.value, chartsRegex, \"\");\n  }\n};\nvar handlePaste = (e) => {\n  const validation = e.currentTarget.getAttribute(\"data-validation\");\n  let pasteData = e.clipboardData.getData(\"text\");\n  if (validation === \"text\") {\n    pasteData = XRegExp.replace(pasteData, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    pasteData = XRegExp.replace(pasteData, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    pasteData = XRegExp.replace(pasteData, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    pasteData = XRegExp.replace(pasteData, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    pasteData = XRegExp.replace(pasteData, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    pasteData = XRegExp.replace(pasteData, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    pasteData = XRegExp.replace(pasteData, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    pasteData = XRegExp.replace(pasteData, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    pasteData = XRegExp.replace(pasteData, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    pasteData = XRegExp.replace(pasteData, chartsRegex, \"\");\n  }\n  e.preventDefault();\n  document.execCommand(\"insertText\", false, pasteData);\n};\nvar handleInvalid = (e, requireError) => {\n  e.target.setCustomValidity(requireError || \"This filed is required !\");\n};\nvar useValidation = (validationType, requireError) => {\n  return {\n    onChange: handleChange,\n    onPaste: handlePaste,\n    onInvalid: (e) => handleInvalid(e, requireError),\n    \"data-validation\": validationType\n  };\n};\nvar getFormElementValue = (form, name) => {\n  return form.elements.namedItem(name)?.value || \"\";\n};\nvar parseMultiSelectInput = (input) => {\n  const value = JSON.parse(input) || [];\n  return value.map((v) => v.value);\n};\n\n// src/helpers/store.ts\nvar setState = (updater, set, stateName) => {\n  return set((state) => ({\n    [stateName]: typeof updater === \"function\" ? updater(state[stateName]) : updater\n  }));\n};\nvar createSelectors = (store) => {\n  let selectors = {};\n  for (let k of Object.keys(store.getState())) {\n    selectors[k] = () => store((s) => s[k]);\n  }\n  return selectors;\n};\nvar useStoreValues = (store, keys) => {\n  const result = {};\n  keys.forEach((key) => {\n    result[key] = store.use[key]();\n  });\n  return result;\n};\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nfunction cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n// src/helpers/time_helpers.ts\nimport { Timestamp as Timestamp2 } from \"firebase/firestore\";\nimport moment2 from \"moment-timezone\";\nfunction timestamp_to_string(firebaseTimestamp, options) {\n  let date;\n  if (firebaseTimestamp instanceof Timestamp2) {\n    date = firebaseTimestamp.toDate();\n  } else if (firebaseTimestamp instanceof Date) {\n    date = firebaseTimestamp;\n  } else if (typeof firebaseTimestamp === \"string\") {\n    date = moment2.utc(firebaseTimestamp, options?.fromFormat || \"DD/MM/YYYY HH:mm:ss\").toDate();\n    if (isNaN(date.getTime())) {\n      throw new Error(\"Invalid date string format\");\n    }\n  } else {\n    throw new Error(\"Invalid input: firebaseTimestamp must be a Timestamp, Date, or valid date string.\");\n  }\n  if (options?.tz) {\n    const result = moment2(date).tz(options?.tz).format(options?.format || \"DD/MM/YYYY HH:mm:ss\");\n    return result;\n  }\n  return moment2.utc(date).format(options?.format || \"DD/MM/YYYY HH:mm:ss\");\n}\nfunction timestamp_to_millis(firebaseTimestamp) {\n  const timestamp = new Timestamp2(firebaseTimestamp?.seconds, firebaseTimestamp?.nanoseconds);\n  return timestamp.toMillis();\n}\nfunction sort_by_timestamp(a, b, reverse = false) {\n  return reverse ? timestamp_to_millis(b) - timestamp_to_millis(a) : timestamp_to_millis(a) - timestamp_to_millis(b);\n}\nexport {\n  add_document,\n  addressRegex,\n  auth,\n  calculateBearing,\n  carsRegex,\n  chartsRegex,\n  cleanNxSites,\n  cn,\n  collections,\n  colorRegex,\n  createSelectors,\n  db,\n  delete_document,\n  displayFormatPhoneNumber,\n  emailRegex,\n  extractAlertsData,\n  extractBoardsData,\n  extractCanbusData,\n  extractCarsData,\n  extractClientData,\n  extractLocationData,\n  extractSiteData,\n  fire_base_TIME_TEMP,\n  formatCarNumber,\n  getFormElementValue,\n  getLocationUrl,\n  getUserCountryByIp,\n  get_all_documents,\n  get_document_by_id,\n  handleChange,\n  handleInvalid,\n  handlePaste,\n  initializeUserPermissions,\n  international_israel_phone_format,\n  isInternational,\n  isInternationalIsraelPhone,\n  is_iccid,\n  local_israel_phone_format,\n  multiStringFormat,\n  numbersOnlyRegex,\n  numbersRegex,\n  parseMultiSelectInput,\n  parsePermissions,\n  priceRegex,\n  query_document,\n  query_document_by_conditions,\n  query_documents,\n  query_documents_by_conditions,\n  renderOnce,\n  setState,\n  set_document,\n  simpleExtractData,\n  snapshot,\n  snapshotDocument,\n  sort_by_timestamp,\n  storage,\n  textNumbersRegex,\n  textRegex,\n  timestamp_to_millis,\n  timestamp_to_string,\n  useStoreValues,\n  useValidation,\n  userNameFormat\n};\n"]}