{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\helpers\\index.mjs"],"names":["moment","getAuth","initializeApp","getStorage","addDoc","collection","deleteDoc","doc","getDoc","getDocs","Timestamp","query","setDoc","getFirestore","where","onSnapshot","cn2","car_number","length","appId","initApp","firebaseConfig","isNodeEnv","process","apiKey","env","authDomain","NEXT_PUBLIC_API_KEY","NEXT_PUBLIC_AUTH_DOMAIN","VITE_API_KEY","VITE_AUTH_DOMAIN","storageBucket","NEXT_PUBLIC_STORAGE_BUCKET","VITE_STORAGE_BUCKET","messagingSenderId","NEXT_PUBLIC_MESSAGING_SENDER_ID","VITE_MESSAGING_SENDER_ID","NEXT_PUBLIC_APP_ID","VITE_APP_ID","app","auth2","storage2","storage","console","auth","error","db","users","ermEvents","collections","clients","sites","lastLocations","erm2Events","ruptelaEvents","polygonEvents","states","audit","nx_settings","protection_types","app_pro_commands_queue","trips","tripsDetails","settings","translations","nx_cars","boards","board_types","charge_capacities","fire_base_TIME_TEMP","now","polygonCars","extractAlertsData","doc2","data","timestamp","timestamp_seconds","seconds","timestamp_ui","unix","format","formatCarNumber","simpleExtractData","docData","id","extractSiteData","dateUpdated","Date","dateCreated","updated","created","nanoseconds","extractClientData","dateUploaded","extractBoardsData","uploaded","icon","extractCarsData","carData","gov_info","vehicle_type","brand","manufacturer","carId","extractCanbusData","newDate","date_ui","extractLocationData","locationData","latitude","longitude","spd","prev_latitude","prev_longitude","lng","prev_lat","prev_lng","Number","toFixed","get_all_documents","collection_path","snapshot2","documents","docs","map","get_document_by_id","doc_id","doc_ref","doc_snap","exists","Error","set_document","merge","add_document","include_id","col_ref","delete_document","query_document","field_name","operator","value","ignore_log","q","query_snapshot","query_documents","query_documents_by_conditions","db_query","where_conditions"],"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","sourcesContent":["// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore,\n  onSnapshot\n} from \"firebase/firestore\";\n\n// src/helpers/cars.ts\nvar formatCarNumber = (car_number) => {\n  var cn2 = car_number;\n  if (cn2?.length == 8) return `${cn2[0]}${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}${cn2[7]}`;\n  if (cn2?.length == 7) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}${cn2[4]}-${cn2[5]}${cn2[6]}`;\n  if (cn2?.length == 6) return `${cn2[0]}${cn2[1]}-${cn2[2]}${cn2[3]}-${cn2[4]}${cn2[5]}`;\n  if (cn2?.length == 5) return `${cn2[0]}-${cn2[1]}${cn2[2]}-${cn2[3]}${cn2[4]}`;\n  return cn2;\n};\n\n// src/helpers/firebase.ts\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    const storage2 = getStorage(app);\n    return { db: db2, auth: auth2, storage: storage2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth, storage } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar extractAlertsData = (doc2) => {\n  const data = doc2.data();\n  const { car_number, timestamp } = data;\n  return {\n    ...data,\n    timestamp_seconds: timestamp.seconds,\n    timestamp_ui: moment.unix(timestamp.seconds).format(\"DD/MM/YY HH:mm\"),\n    car_number: formatCarNumber(car_number)\n  };\n};\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar extractSiteData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"DD.MM.YYYY - HH:mm\"),\n    updated: moment(dateUpdated).format(\"DD.MM.YYYY - HH:mm\")\n  };\n};\nvar extractClientData = (doc2) => {\n  const data = doc2.data();\n  const dateUpdated = new Date(data.updated?.seconds * 1e3 + data.updated.nanoseconds / 1e6);\n  const dateCreated = new Date(data.created?.seconds * 1e3 + data.created.nanoseconds / 1e6);\n  return {\n    ...data,\n    id: doc2.id,\n    created: moment(dateCreated).format(\"HH:mm  DD/MM/YY\"),\n    updated: moment(dateUpdated).format(\"HH:mm  DD/MM/YY\")\n  };\n};\nvar extractBoardsData = (doc2) => {\n  const data = doc2.data();\n  const dateUploaded = typeof data.uploaded === \"string\" ? data.uploaded : moment.unix(data.uploaded?.seconds).format(\"DD/MM/YY HH:mm\");\n  return {\n    ...data,\n    id: doc2.id,\n    uploaded: dateUploaded\n  };\n};\nvar extractCarsData = (doc2) => {\n  const carData = doc2.data();\n  let icon;\n  const gov_info = carData.gov_info;\n  if (gov_info) {\n    if (carData.icon) {\n      icon = carData.icon;\n    } else if (gov_info.vehicle_type === \"atv\") {\n      icon = \"truck\";\n    } else if (gov_info.vehicle_type === \"motorcycle\") {\n      icon = \"motorcycle\";\n    } else {\n      icon = \"car\";\n    }\n  } else {\n    icon = \"car\";\n  }\n  return {\n    ...carData,\n    id: doc2.id,\n    brand: carData.brand || carData.manufacturer,\n    car_number: carData.carId,\n    icon\n  };\n};\nvar extractCanbusData = (doc2) => {\n  const data = doc2.data();\n  const newDate = new Date(data.timestamp.seconds * 1e3);\n  return {\n    ...data,\n    date_ui: moment(newDate).format(\"DD/MM/YYYY - HH:mm\")\n  };\n};\nvar extractLocationData = (doc2) => {\n  const locationData = doc2.data();\n  const { latitude, longitude, spd, timestamp, prev_latitude, prev_longitude } = locationData;\n  return {\n    ...locationData,\n    id: doc2.id,\n    lat: latitude,\n    lng: longitude,\n    prev_lat: prev_latitude,\n    prev_lng: prev_longitude,\n    timestamp: timestamp?.seconds,\n    spd: Number(spd).toFixed(0)\n  };\n};\nvar get_all_documents = async (collection_path) => {\n  try {\n    const snapshot2 = await getDocs(collection(db, collection_path));\n    const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    return [];\n  }\n};\nvar get_document_by_id = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    const doc_snap = await getDoc(doc_ref);\n    if (!doc_snap.exists()) {\n      throw new Error(\"Document not found, document id: \" + doc_id);\n    }\n    return simpleExtractData(doc_snap);\n  } catch (error) {\n    console.error(\"Error from get_document_by_id\", error);\n    return null;\n  }\n};\nvar set_document = async (collection_path, doc_id, data) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await setDoc(doc_ref, data, { merge: true });\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document by id: ${doc_id} in collection: ${collection_path}`, { error, data });\n    return false;\n  }\n};\nvar add_document = async (collection_path, data, include_id = false) => {\n  try {\n    const col_ref = collection(db, collection_path);\n    const doc_ref = await addDoc(col_ref, data);\n    if (include_id) {\n      await setDoc(doc_ref, { ...data, id: doc_ref.id }, { merge: true });\n    }\n    return true;\n  } catch (error) {\n    console.error(`Failed to create document in collection: ${collection_path}`, error);\n    return false;\n  }\n};\nvar delete_document = async (collection_path, doc_id) => {\n  try {\n    const doc_ref = doc(db, collection_path, doc_id);\n    await deleteDoc(doc_ref);\n    return true;\n  } catch (error) {\n    console.error(`Failed to delete document with id ${doc_id} from collection ${collection_path}`, error);\n    return false;\n  }\n};\nvar query_document = async (collection_path, field_name, operator, value, ignore_log = false) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (documents.length < 1) {\n      throw new Error(\n        `No data to return from: \ncollection: ${collection_path}, \nfield_name: ${field_name}, \noperator: ${operator}, \nvalue: ${value}`\n      );\n    }\n    return documents[0];\n  } catch (error) {\n    if (!ignore_log) {\n      console.error(\"Error querying document:\", error);\n    }\n    return null;\n  }\n};\nvar query_documents = async (collection_path, field_name, operator, value) => {\n  try {\n    const q = query(collection(db, collection_path), where(field_name, operator, value));\n    const query_snapshot = await getDocs(q);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${field_name} - ${operator} - ${value} `, error);\n    return [];\n  }\n};\nvar query_documents_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    return documents;\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return [];\n  }\n};\nvar query_document_by_conditions = async (collection_path, where_conditions) => {\n  try {\n    let db_query = collection(db, collection_path);\n    where_conditions.forEach((condition) => {\n      db_query = query(db_query, where(condition.field_name, condition.operator, condition.value));\n    });\n    const query_snapshot = await getDocs(db_query);\n    const documents = query_snapshot.docs.map((doc2) => simpleExtractData(doc2));\n    if (!documents[0]) {\n      throw new Error(\"No data returned from DB\");\n    }\n    return documents[0];\n  } catch (error) {\n    console.error(`Error querying documents: ${collection_path} - ${JSON.stringify(where_conditions)} `, error);\n    return null;\n  }\n};\nvar snapshot = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  let collectionRef = collection(db, config.collectionName);\n  if (config.conditions) {\n    config.conditions.forEach((condition) => {\n      collectionRef = query(collectionRef, where(condition.field_name, condition.operator, condition.value));\n    });\n  }\n  const unsubscribe = onSnapshot(\n    collectionRef,\n    (snapshot2) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n        config.onFirstTime?.(documents, config);\n        config.extraParsers?.forEach((extraParser) => {\n          extraParser.onFirstTime?.(documents, config);\n        });\n        resolvePromise();\n      } else {\n        const addedDocs = [];\n        const modifiedDocs = [];\n        const removedDocs = [];\n        snapshot2.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            addedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"modified\") {\n            modifiedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"removed\") {\n            removedDocs.push(simpleExtractData(change.doc));\n          }\n        });\n        addedDocs.length && config.onAdd?.(addedDocs, config);\n        modifiedDocs.length && config.onModify?.(modifiedDocs, config);\n        removedDocs.length && config.onRemove?.(removedDocs, config);\n        config.extraParsers?.forEach((extraParser) => {\n          addedDocs.length && extraParser.onAdd?.(addedDocs, config);\n          modifiedDocs.length && extraParser.onModify?.(modifiedDocs, config);\n          removedDocs.length && extraParser.onRemove?.(removedDocs, config);\n        });\n      }\n    },\n    (error) => {\n      console.error(`Error listening to collection: ${config.collectionName}`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar snapshotDocument = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> Document in ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  const documentRef = doc(db, config.collectionName, config.documentId);\n  const unsubscribe = onSnapshot(\n    documentRef,\n    (docSnapshot) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onFirstTime?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onFirstTime?.([document2], config);\n            });\n          } else {\n            console.warn(`Document in ${config.collectionName} does not meet conditions.`);\n          }\n        } else {\n          console.warn(`Document not found in ${config.collectionName}.`);\n        }\n        resolvePromise();\n      } else {\n        if (docSnapshot.exists()) {\n          const document2 = simpleExtractData(docSnapshot);\n          if (checkConditions(document2, config.conditions)) {\n            config.onModify?.([document2], config);\n            config.extraParsers?.forEach((extraParser) => {\n              extraParser.onModify?.([document2], config);\n            });\n          }\n        } else {\n          config.onRemove?.([], config);\n          config.extraParsers?.forEach((extraParser) => {\n            extraParser.onRemove?.([], config);\n          });\n        }\n      }\n    },\n    (error) => {\n      console.error(`Error listening to document in ${config.collectionName}:`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\nvar checkConditions = (document2, conditions) => {\n  if (!conditions || conditions.length === 0) return true;\n  return conditions.every((condition) => {\n    const fieldValue = document2[condition.field_name];\n    switch (condition.operator) {\n      case \"==\":\n        return fieldValue === condition.value;\n      case \"!=\":\n        return fieldValue !== condition.value;\n      case \"<\":\n        return fieldValue < condition.value;\n      case \"<=\":\n        return fieldValue <= condition.value;\n      case \">\":\n        return fieldValue > condition.value;\n      case \">=\":\n        return fieldValue >= condition.value;\n      case \"array-contains\":\n        return Array.isArray(fieldValue) && fieldValue.includes(condition.value);\n      default:\n        return false;\n    }\n  });\n};\nvar cleanNxSites = async () => {\n  const clients = (await get_all_documents(\"nx-clients\")).map((v) => v.id);\n  const sites = await get_all_documents(\"nx-sites\");\n  const allSitesToDelete = sites.filter((v) => !clients.includes(v.client));\n  console.log(\"allSitesToDelete\", allSitesToDelete);\n  allSitesToDelete.forEach(async (v) => {\n    await delete_document(\"nx-sites\", v.id);\n    console.log(`Site ${v.id} deleted.`);\n  });\n};\n\n// src/helpers/global.ts\nimport { CountryOptions } from \"akeyless-types-commons\";\nimport axios from \"axios\";\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\nvar isInternational = (phone_number) => {\n  return phone_number.startsWith(\"+\");\n};\nvar isInternationalIsraelPhone = (phone_number) => {\n  return phone_number.startsWith(\"+9725\");\n};\nvar local_israel_phone_format = (international_number) => {\n  return international_number.replace(\"+972\", \"0\");\n};\nvar international_israel_phone_format = (phone) => {\n  const validNumber = phone.slice(1, phone.length);\n  return \"+972\".concat(validNumber);\n};\nvar displayFormatPhoneNumber = (phoneNumber) => {\n  if (isInternational(phoneNumber)) {\n    const phoneNumberObject = parsePhoneNumberFromString(phoneNumber);\n    if (!phoneNumberObject) {\n      return phoneNumber;\n    }\n    return phoneNumberObject.formatInternational().replace(/\\s/g, \"-\");\n  }\n  return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, \"$1-$2-$3\");\n};\nvar is_iccid = (number) => {\n  if (number.length < 19 || number.length > 22) return false;\n  if (!/^\\d+$/.test(number)) return false;\n  if (!number.startsWith(\"89\")) return false;\n  return true;\n};\n\n// src/helpers/global.ts\nvar calculateBearing = (startLat, startLng, endLat, endLng) => {\n  if (startLat === endLat || startLng === endLng) {\n    return 0;\n  }\n  if (startLat === void 0 || startLng === void 0 || endLat === void 0 || endLng === void 0) {\n    return 0;\n  }\n  const startLatRad = startLat * Math.PI / 180;\n  const startLngRad = startLng * Math.PI / 180;\n  const endLatRad = endLat * Math.PI / 180;\n  const endLngRad = endLng * Math.PI / 180;\n  const dLon = endLngRad - startLngRad;\n  const y = Math.sin(dLon) * Math.cos(endLatRad);\n  const x = Math.cos(startLatRad) * Math.sin(endLatRad) - Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLon);\n  const bearing = Math.atan2(y, x) * 180 / Math.PI;\n  return (bearing + 360) % 360;\n};\nvar renderOnce = () => {\n  return true;\n};\nvar getUserCountryByIp = async () => {\n  try {\n    const response = await axios.get(\"https://ipapi.co/json/\");\n    return (response.data.country_code || CountryOptions.IL).toLowerCase();\n  } catch (error) {\n    console.error(\"Error fetching Country:\", error);\n    return CountryOptions.IL;\n  }\n};\nvar parsePermissions = (object) => {\n  if (!object?.features) {\n    return {};\n  }\n  const features = object.features;\n  let result = {};\n  features.forEach((feature) => {\n    if (!feature.includes(\"__\")) {\n      return;\n    }\n    const [featureType, featureName] = feature.split(\"__\");\n    if (!featureType || !featureName) {\n      return;\n    }\n    if (!result[featureType]) {\n      result[featureType] = {};\n    }\n    result[featureType][featureName] = true;\n  });\n  return result;\n};\nvar initializeUserPermissions = async ({ phoneNumber, firstTimeArray, getUpdatePermissions }) => {\n  let unsubscribe = null;\n  let permissions = {};\n  try {\n    const { promise, unsubscribe: unsubscribeSnapshot } = snapshot(\n      {\n        collectionName: \"nx-users\",\n        conditions: [{ field_name: \"phone_number\", operator: \"in\", value: [phoneNumber, local_israel_phone_format(phoneNumber)] }],\n        onFirstTime: (docs) => {\n          if (!docs.length) {\n            throw new Error(\"User not found\");\n          }\n          permissions = parsePermissions(docs[0]);\n          getUpdatePermissions(parsePermissions(docs[0]));\n        },\n        onModify: (docs) => {\n          getUpdatePermissions(parsePermissions(docs[0]));\n        }\n      },\n      firstTimeArray\n    );\n    unsubscribe = unsubscribeSnapshot;\n    await promise;\n    return { unsubscribe, permissions };\n  } catch (error) {\n    if (unsubscribe) {\n      unsubscribe();\n    }\n    console.error(\"Error initializing user permissions:\", error.message);\n    throw error;\n  }\n};\n\n// src/helpers/forms.ts\nimport XRegExp from \"xregexp\";\nvar textRegex = XRegExp(\"[^\\\\p{L}\\\\s-]\", \"gu\");\nvar numbersRegex = XRegExp(\"[^0-9\\\\s-+]\", \"g\");\nvar numbersOnlyRegex = XRegExp(\"[^0-9]\", \"g\");\nvar priceRegex = XRegExp(\"[^0-9.]\", \"g\");\nvar emailRegex = XRegExp(\"[^\\\\p{L}0-9.@\\\\s-]\", \"gu\");\nvar colorRegex = XRegExp(\"[^#0-9A-Fa-f]\", \"g\");\nvar carsRegex = XRegExp(\"[^\\\\p{L}0-9,_]\", \"gu\");\nvar textNumbersRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s+\\\\-]\", \"gu\");\nvar addressRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,\\\\-]\", \"gu\");\nvar chartsRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,_@!\\\\-]\", \"gu\");\nvar handleChange = (e) => {\n  e.target.setCustomValidity(\"\");\n  const validation = e.target.getAttribute(\"data-validation\");\n  if (validation === \"text\") {\n    e.target.value = XRegExp.replace(e.target.value, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    e.target.value = XRegExp.replace(e.target.value, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    e.target.value = XRegExp.replace(e.target.value, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    e.target.value = XRegExp.replace(e.target.value, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    e.target.value = XRegExp.replace(e.target.value, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    e.target.value = XRegExp.replace(e.target.value, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    e.target.value = XRegExp.replace(e.target.value, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    e.target.value = XRegExp.replace(e.target.value, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    e.target.value = XRegExp.replace(e.target.value, chartsRegex, \"\");\n  }\n};\nvar handlePaste = (e) => {\n  const validation = e.currentTarget.getAttribute(\"data-validation\");\n  let pasteData = e.clipboardData.getData(\"text\");\n  if (validation === \"text\") {\n    pasteData = XRegExp.replace(pasteData, textRegex, \"\");\n  } else if (validation === \"numbers\") {\n    pasteData = XRegExp.replace(pasteData, numbersRegex, \"\");\n  } else if (validation === \"numbersOnly\") {\n    pasteData = XRegExp.replace(pasteData, numbersOnlyRegex, \"\");\n  } else if (validation === \"price\") {\n    pasteData = XRegExp.replace(pasteData, priceRegex, \"\");\n  } else if (validation === \"textNumbers\") {\n    pasteData = XRegExp.replace(pasteData, textNumbersRegex, \"\");\n  } else if (validation === \"email\") {\n    pasteData = XRegExp.replace(pasteData, emailRegex, \"\");\n  } else if (validation === \"color\") {\n    pasteData = XRegExp.replace(pasteData, colorRegex, \"\");\n  } else if (validation === \"address\") {\n    pasteData = XRegExp.replace(pasteData, addressRegex, \"\");\n  } else if (validation === \"cars\") {\n    pasteData = XRegExp.replace(pasteData, carsRegex, \"\");\n  } else if (validation === \"charts\") {\n    pasteData = XRegExp.replace(pasteData, chartsRegex, \"\");\n  }\n  e.preventDefault();\n  document.execCommand(\"insertText\", false, pasteData);\n};\nvar handleInvalid = (e, requireError) => {\n  e.target.setCustomValidity(requireError || \"This filed is required !\");\n};\nvar useValidation = (validationType, requireError) => {\n  return {\n    onChange: handleChange,\n    onPaste: handlePaste,\n    onInvalid: (e) => handleInvalid(e, requireError),\n    \"data-validation\": validationType\n  };\n};\n\n// src/helpers/store.ts\nvar setState = (updater, set, stateName) => {\n  return set((state) => ({\n    [stateName]: typeof updater === \"function\" ? updater(state[stateName]) : updater\n  }));\n};\nvar createSelectors = (store) => {\n  let selectors = {};\n  for (let k of Object.keys(store.getState())) {\n    selectors[k] = () => store((s) => s[k]);\n  }\n  return selectors;\n};\nvar useStoreValues = (store, keys) => {\n  const result = {};\n  keys.forEach((key) => {\n    result[key] = store.use[key]();\n  });\n  return result;\n};\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nfunction cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\nexport {\n  add_document,\n  addressRegex,\n  auth,\n  calculateBearing,\n  carsRegex,\n  chartsRegex,\n  cleanNxSites,\n  cn,\n  collections,\n  colorRegex,\n  createSelectors,\n  db,\n  delete_document,\n  displayFormatPhoneNumber,\n  emailRegex,\n  extractAlertsData,\n  extractBoardsData,\n  extractCanbusData,\n  extractCarsData,\n  extractClientData,\n  extractLocationData,\n  extractSiteData,\n  fire_base_TIME_TEMP,\n  formatCarNumber,\n  getUserCountryByIp,\n  get_all_documents,\n  get_document_by_id,\n  handleChange,\n  handleInvalid,\n  handlePaste,\n  initializeUserPermissions,\n  international_israel_phone_format,\n  isInternational,\n  isInternationalIsraelPhone,\n  is_iccid,\n  local_israel_phone_format,\n  numbersOnlyRegex,\n  numbersRegex,\n  parsePermissions,\n  priceRegex,\n  query_document,\n  query_document_by_conditions,\n  query_documents,\n  query_documents_by_conditions,\n  renderOnce,\n  setState,\n  set_document,\n  simpleExtractData,\n  snapshot,\n  snapshotDocument,\n  storage,\n  textNumbersRegex,\n  textRegex,\n  useStoreValues,\n  useValidation\n};\n"]}