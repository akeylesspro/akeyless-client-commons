{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\hooks\\index.mjs"],"names":["CountryOptions","CountryOptions2","useEffect","useLayoutEffect","useRef","moment","initializeApp","getStorage","getAuth","addDoc","collection","deleteDoc","doc","getDoc","getDocs","query","setDoc","Timestamp","where","getFirestore","onSnapshot","initApp","isNodeEnv","process","env","firebaseConfig","apiKey","NEXT_PUBLIC_API_KEY","VITE_API_KEY","authDomain","NEXT_PUBLIC_AUTH_DOMAIN","VITE_AUTH_DOMAIN","projectId","NEXT_PUBLIC_PROJECT_ID","VITE_PROJECT_ID","storageBucket","NEXT_PUBLIC_STORAGE_BUCKET","VITE_STORAGE_BUCKET","messagingSenderId","NEXT_PUBLIC_MESSAGING_SENDER_ID","VITE_MESSAGING_SENDER_ID","appId","NEXT_PUBLIC_APP_ID","VITE_APP_ID","app","auth2","db2","storage2","db","auth","storage","error","console","collections","clients","cars","users","lastLocations","ermEvents","erm2Events","ruptelaEvents","polygons","polygonEvents","polygonCars","states","app_pro_commands_queue","trips","tripsDetails","audit","nx_settings","settings","translations"],"mappings":"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","sourcesContent":["// src/hooks/global.ts\nimport { CountryOptions as CountryOptions2 } from \"akeyless-types-commons\";\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\n\n// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore,\n  onSnapshot\n} from \"firebase/firestore\";\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    const storage2 = getStorage(app);\n    return { db: db2, auth: auth2, storage: storage2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth, storage } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar snapshot = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  let collectionRef = collection(db, config.collectionName);\n  if (config.conditions) {\n    config.conditions.forEach((condition) => {\n      collectionRef = query(collectionRef, where(condition.field_name, condition.operator, condition.value));\n    });\n  }\n  const unsubscribe = onSnapshot(\n    collectionRef,\n    (snapshot2) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n        config.onFirstTime?.(documents, config);\n        config.extraParsers?.forEach((extraParser) => {\n          extraParser.onFirstTime?.(documents, config);\n        });\n        resolvePromise();\n      } else {\n        const addedDocs = [];\n        const modifiedDocs = [];\n        const removedDocs = [];\n        snapshot2.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            addedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"modified\") {\n            modifiedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"removed\") {\n            removedDocs.push(simpleExtractData(change.doc));\n          }\n        });\n        addedDocs.length && config.onAdd?.(addedDocs, config);\n        modifiedDocs.length && config.onModify?.(modifiedDocs, config);\n        removedDocs.length && config.onRemove?.(removedDocs, config);\n        config.extraParsers?.forEach((extraParser) => {\n          addedDocs.length && extraParser.onAdd?.(addedDocs, config);\n          modifiedDocs.length && extraParser.onModify?.(modifiedDocs, config);\n          removedDocs.length && extraParser.onRemove?.(removedDocs, config);\n        });\n      }\n    },\n    (error) => {\n      console.error(`Error listening to collection: ${config.collectionName}`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\n\n// src/helpers/global.ts\nimport { CountryOptions } from \"akeyless-types-commons\";\nimport axios from \"axios\";\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\n\n// src/helpers/global.ts\nvar getUserCountryByIp = async () => {\n  try {\n    const response = await axios.get(\"https://ipapi.co/json/\");\n    return (response.data.country_code || CountryOptions.IL).toLowerCase();\n  } catch (error) {\n    console.error(\"Error fetching Country:\", error);\n    return CountryOptions.IL;\n  }\n};\n\n// src/helpers/forms.ts\nimport XRegExp from \"xregexp\";\nvar textRegex = XRegExp(\"[^\\\\p{L}\\\\s-]\", \"gu\");\nvar numbersRegex = XRegExp(\"[^0-9\\\\s-+]\", \"g\");\nvar numbersOnlyRegex = XRegExp(\"[^0-9]\", \"g\");\nvar priceRegex = XRegExp(\"[^0-9.]\", \"g\");\nvar emailRegex = XRegExp(\"[^\\\\p{L}0-9.@\\\\s-]\", \"gu\");\nvar colorRegex = XRegExp(\"[^#0-9A-Fa-f]\", \"g\");\nvar carsRegex = XRegExp(\"[^\\\\p{L}0-9,_]\", \"gu\");\nvar textNumbersRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s+\\\\-]\", \"gu\");\nvar addressRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,\\\\-]\", \"gu\");\nvar chartsRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,_@!\\\\-]\", \"gu\");\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n// src/hooks/global.ts\nfunction useSafeEffect(callback, dependencies, error_message) {\n  useEffect(() => {\n    try {\n      callback();\n    } catch (error) {\n      console.error(error_message || \"Error in useEffect:\", error);\n    }\n  }, dependencies);\n}\nvar useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n  return null;\n};\nvar useSnapshotBulk = (configs, label) => {\n  const snapshotsFirstTime = useRef([]);\n  const unsubscribeFunctions = useRef([]);\n  useEffect(() => {\n    const start = performance.now();\n    console.log(`==> ${label || \"Custom snapshots\"} started... `);\n    const snapshotResults = configs.map((config) => snapshot(config, snapshotsFirstTime.current));\n    unsubscribeFunctions.current = snapshotResults.map((result) => result.unsubscribe);\n    Promise.all(snapshotResults.map((result) => result.promise)).then(() => {\n      console.log(`==> ${label || \"Custom snapshots\"} ended. It took ${(performance.now() - start).toFixed(2)} ms`);\n    });\n    return () => {\n      unsubscribeFunctions.current.forEach((unsubscribe) => {\n        if (unsubscribe) {\n          unsubscribe();\n        }\n      });\n    };\n  }, [configs, label]);\n};\nvar useSetUserCountry = (setUserCountry, changLang) => {\n  useLayoutEffect(() => {\n    const currentCountry = localStorage.getItem(\"userCountry\");\n    if (!currentCountry) {\n      const updateCountry = async () => {\n        const country = await getUserCountryByIp();\n        changLang(country === CountryOptions2.IL ? \"he\" : \"en\");\n        setUserCountry(country);\n        localStorage.setItem(\"userCountry\", country);\n      };\n      updateCountry();\n    }\n  }, []);\n  return null;\n};\n\n// src/hooks/WebWorker.ts\nimport { useCallback, useEffect as useEffect2, useRef as useRef2 } from \"react\";\nexport {\n  useDocumentTitle,\n  useSafeEffect,\n  useSetUserCountry,\n  useSnapshotBulk\n};\n"]}