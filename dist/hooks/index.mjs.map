{"version":3,"sources":["c:\\work\\akeyless\\commons\\client_commons\\dist\\hooks\\index.mjs"],"names":["CountryOptions","CountryOptions2","moment","initializeApp","getStorage","getAuth","addDoc","collection","deleteDoc","doc","getDoc","getDocs","query","setDoc","Timestamp","where","getFirestore","onSnapshot","initApp","isNodeEnv","process","env","firebaseConfig","apiKey","NEXT_PUBLIC_API_KEY","VITE_API_KEY","authDomain","NEXT_PUBLIC_AUTH_DOMAIN","VITE_AUTH_DOMAIN","projectId","NEXT_PUBLIC_PROJECT_ID","VITE_PROJECT_ID","storageBucket","NEXT_PUBLIC_STORAGE_BUCKET","VITE_STORAGE_BUCKET","messagingSenderId","NEXT_PUBLIC_MESSAGING_SENDER_ID","VITE_MESSAGING_SENDER_ID","appId","NEXT_PUBLIC_APP_ID","VITE_APP_ID","app","auth2","db2","storage2","db","auth","storage","error","console","collections","clients","sites","cars","users","lastLocations","ermEvents","erm2Events","ruptelaEvents","polygons","polygonEvents","polygonCars","canbus","states","app_pro_commands_queue","trips","tripsDetails","audit","settings","translations","nx_cars","boards","protection_types","board_types","charge_capacities"],"mappings":"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","sourcesContent":["// src/hooks/global.ts\nimport { CountryOptions as CountryOptions2 } from \"akeyless-types-commons\";\nimport { useEffect, useLayoutEffect, useRef } from \"react\";\n\n// src/helpers/firebase.ts\nimport moment from \"moment\";\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  query,\n  setDoc,\n  Timestamp,\n  where,\n  getFirestore,\n  onSnapshot\n} from \"firebase/firestore\";\nvar initApp = () => {\n  const isNodeEnv = typeof process !== \"undefined\" && process.env;\n  const firebaseConfig = {\n    apiKey: isNodeEnv ? process.env.NEXT_PUBLIC_API_KEY : import.meta.env.VITE_API_KEY,\n    authDomain: isNodeEnv ? process.env.NEXT_PUBLIC_AUTH_DOMAIN : import.meta.env.VITE_AUTH_DOMAIN,\n    projectId: isNodeEnv ? process.env.NEXT_PUBLIC_PROJECT_ID : import.meta.env.VITE_PROJECT_ID,\n    storageBucket: isNodeEnv ? process.env.NEXT_PUBLIC_STORAGE_BUCKET : import.meta.env.VITE_STORAGE_BUCKET,\n    messagingSenderId: isNodeEnv ? process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID : import.meta.env.VITE_MESSAGING_SENDER_ID,\n    appId: isNodeEnv ? process.env.NEXT_PUBLIC_APP_ID : import.meta.env.VITE_APP_ID\n  };\n  try {\n    const app = initializeApp(firebaseConfig);\n    const auth2 = getAuth(app);\n    const db2 = getFirestore(app);\n    const storage2 = getStorage(app);\n    return { db: db2, auth: auth2, storage: storage2 };\n  } catch (error) {\n    console.error(\"Failed to initialize Firebase app:\", error);\n    return { db: null, auth: null };\n  }\n};\nvar { db, auth, storage } = initApp();\nvar collections = {\n  clients: collection(db, \"nx-clients\"),\n  sites: collection(db, \"nx-sites\"),\n  cars: collection(db, \"units\"),\n  users: collection(db, \"nx-users\"),\n  lastLocations: collection(db, \"last_locations\"),\n  ermEvents: collection(db, \"erm_events_general\"),\n  erm2Events: collection(db, \"erm2_events_general\"),\n  ruptelaEvents: collection(db, \"ruptela_events_general\"),\n  polygons: collection(db, \"nx-polygons\"),\n  polygonEvents: collection(db, \"polygon_events\"),\n  polygonCars: collection(db, \"polygon_cars\"),\n  canbus: collection(db, \"erm_canbus_parameters\"),\n  states: collection(db, \"erm_states\"),\n  app_pro_commands_queue: collection(db, \"app_pro_commands_queue\"),\n  trips: collection(db, \"erm2_trip\"),\n  tripsDetails: collection(db, \"erm2_trip_details\"),\n  audit: collection(db, \"nx-audit\"),\n  nx_settings: collection(db, \"nx-settings\"),\n  settings: collection(db, \"settings\"),\n  translations: collection(db, \"nx-translations\"),\n  nx_cars: collection(db, \"nx-cars\"),\n  boards: collection(db, \"boards\"),\n  protection_types: collection(db, \"protectionTypes\"),\n  board_types: collection(db, \"boardTypes\"),\n  charge_capacities: collection(db, \"nx-charge-capacities\")\n};\nvar fire_base_TIME_TEMP = Timestamp.now;\nvar simpleExtractData = (doc2) => {\n  const docData = doc2.data();\n  return {\n    ...docData,\n    id: doc2.id\n  };\n};\nvar snapshot = (config, snapshotsFirstTime) => {\n  let resolvePromise;\n  let isResolved = false;\n  const promise = new Promise((resolve) => {\n    console.log(`==> ${config.collectionName} subscribed.`);\n    resolvePromise = () => {\n      if (!isResolved) {\n        isResolved = true;\n        resolve();\n      }\n    };\n  });\n  let collectionRef = collection(db, config.collectionName);\n  if (config.conditions) {\n    config.conditions.forEach((condition) => {\n      collectionRef = query(collectionRef, where(condition.field_name, condition.operator, condition.value));\n    });\n  }\n  const unsubscribe = onSnapshot(\n    collectionRef,\n    (snapshot2) => {\n      if (!snapshotsFirstTime.includes(config.collectionName)) {\n        snapshotsFirstTime.push(config.collectionName);\n        const documents = snapshot2.docs.map((doc2) => simpleExtractData(doc2));\n        config.onFirstTime?.(documents, config);\n        config.extraParsers?.forEach((extraParser) => {\n          extraParser.onFirstTime?.(documents, config);\n        });\n        resolvePromise();\n      } else {\n        const addedDocs = [];\n        const modifiedDocs = [];\n        const removedDocs = [];\n        snapshot2.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            addedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"modified\") {\n            modifiedDocs.push(simpleExtractData(change.doc));\n          } else if (change.type === \"removed\") {\n            removedDocs.push(simpleExtractData(change.doc));\n          }\n        });\n        addedDocs.length && config.onAdd?.(addedDocs, config);\n        modifiedDocs.length && config.onModify?.(modifiedDocs, config);\n        removedDocs.length && config.onRemove?.(removedDocs, config);\n        config.extraParsers?.forEach((extraParser) => {\n          addedDocs.length && extraParser.onAdd?.(addedDocs, config);\n          modifiedDocs.length && extraParser.onModify?.(modifiedDocs, config);\n          removedDocs.length && extraParser.onRemove?.(removedDocs, config);\n        });\n      }\n    },\n    (error) => {\n      console.error(`Error listening to collection: ${config.collectionName}`, error);\n      resolvePromise();\n    }\n  );\n  return { promise, unsubscribe };\n};\n\n// src/helpers/global.ts\nimport { CountryOptions } from \"akeyless-types-commons\";\nimport axios from \"axios\";\n\n// src/helpers/phoneNumber.ts\nimport { parsePhoneNumberFromString } from \"libphonenumber-js\";\n\n// src/helpers/global.ts\nvar getUserCountryByIp = async () => {\n  try {\n    const response = await axios.get(\"https://ipapi.co/json/\");\n    return (response.data.country_code || CountryOptions.IL).toLowerCase();\n  } catch (error) {\n    console.error(\"Error fetching Country:\", error);\n    return CountryOptions.IL;\n  }\n};\n\n// src/helpers/forms.ts\nimport XRegExp from \"xregexp\";\nvar textRegex = XRegExp(\"[^\\\\p{L}\\\\s-]\", \"gu\");\nvar numbersRegex = XRegExp(\"[^0-9\\\\s-+]\", \"g\");\nvar numbersOnlyRegex = XRegExp(\"[^0-9]\", \"g\");\nvar priceRegex = XRegExp(\"[^0-9.]\", \"g\");\nvar emailRegex = XRegExp(\"[^\\\\p{L}0-9.@\\\\s-]\", \"gu\");\nvar colorRegex = XRegExp(\"[^#0-9A-Fa-f]\", \"g\");\nvar carsRegex = XRegExp(\"[^\\\\p{L}0-9,_]\", \"gu\");\nvar textNumbersRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s+\\\\-]\", \"gu\");\nvar addressRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,\\\\-]\", \"gu\");\nvar chartsRegex = XRegExp(\"[^\\\\p{L}0-9\\\\s.,_@!\\\\-]\", \"gu\");\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n// src/helpers/time_helpers.ts\nimport { Timestamp as Timestamp2 } from \"firebase/firestore\";\nimport moment2 from \"moment-timezone\";\n\n// src/hooks/global.ts\nfunction useSafeEffect(callback, dependencies, error_message) {\n  useEffect(() => {\n    try {\n      callback();\n    } catch (error) {\n      console.error(error_message || \"Error in useEffect:\", error);\n    }\n  }, dependencies);\n}\nvar useDocumentTitle = (title) => {\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n  return null;\n};\nvar useSnapshotBulk = (configs, label) => {\n  const snapshotsFirstTime = useRef([]);\n  const unsubscribeFunctions = useRef([]);\n  useEffect(() => {\n    const start = performance.now();\n    console.log(`==> ${label || \"Custom snapshots\"} started... `);\n    const snapshotResults = configs.map((config) => snapshot(config, snapshotsFirstTime.current));\n    unsubscribeFunctions.current = snapshotResults.map((result) => result.unsubscribe);\n    Promise.all(snapshotResults.map((result) => result.promise)).then(() => {\n      console.log(`==> ${label || \"Custom snapshots\"} ended. It took ${(performance.now() - start).toFixed(2)} ms`);\n    });\n  }, [JSON.stringify(configs), label]);\n  useEffect(() => {\n    return () => {\n      unsubscribeFunctions.current.forEach((unsubscribe) => {\n        if (unsubscribe) {\n          unsubscribe();\n        }\n      });\n    };\n  }, []);\n};\nvar useSetUserCountry = (setUserCountry, changLang) => {\n  useLayoutEffect(() => {\n    const currentCountry = localStorage.getItem(\"userCountry\");\n    if (!currentCountry) {\n      const updateCountry = async () => {\n        const country = await getUserCountryByIp();\n        changLang(country === CountryOptions2.IL ? \"he\" : \"en\");\n        setUserCountry(country);\n        localStorage.setItem(\"userCountry\", country);\n      };\n      updateCountry();\n    }\n  }, []);\n  return null;\n};\n\n// src/hooks/WebWorker.ts\nimport { useCallback, useEffect as useEffect2, useRef as useRef2 } from \"react\";\nexport {\n  useDocumentTitle,\n  useSafeEffect,\n  useSetUserCountry,\n  useSnapshotBulk\n};\n"]}